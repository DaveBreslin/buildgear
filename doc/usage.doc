<chapter id="usage">
   <title>Using Build Gear</title>

   <para>
      The following chapter describes the mostly used Build Gear features by
      command line examples.
   </para>

   <section>
      <title> Help </title>

      <para>
         To list all available Build Gear commands and options simply type:
      </para>

<screen>
$ buildgear --help
</screen>

      <para>
         To ask for help on a specific command type eg.:
      </para>

<screen>
$ buildgear help build
</screen>

   </section>


   <section>
      <title> Building </title>

      <para>
         To build for example the "fs" build simply type:
      </para>

<screen>
$ buildgear build fs
</screen>

      <para>
         This will automatically download all sources, resolve all dependencies
         and start building the "fs" build.
      </para>

   </section>

   <section>
      <title> Building With Load Chart Enabled</title>

      <para>
         To build and have Build Gear produce a load chart containing CPU and
         memory usage during the build process simply do eg.:
      </para>

<screen>
$ buildgear build fs --load-chart
</screen>

      <para>
         After a successful "fs" build the load chart will be available in
         <code>build/output/load-chart.fs.svg</code>.
      </para>

   </section>



   <section>
      <title> Show Log </title>

      <para>
         To have Build Gear show the full log after a build has finished simply type:
      </para>

<screen>
$ buildgear show --log
</screen>

      <para>
         Alternatively, when Build Gear is building you can follow (tail) the
         build log live by simply typing:
      </para>

<screen>
$ buildgear show --log-tail
</screen>

      <para>
         This features is quite useful - it enables you to have eg. one
         terminal window open where you launch the actual build commands while
         in another window you follow the log as it progresses during the
         build. It will keep tailing the log across builds.
      </para>

   </section>



   <section>
      <title> Show Build Order </title>

      <para>
         To have Build Gear show the build order of a particular build, simply
         type eg.:
      </para>

<screen>
$ buildgear show --build-order fs
</screen>

      <para>
         This will produce a build order list. In case of parallel building,
         builds marked with the same group number is built concurrently.
      </para>

   </section>



   <section>
      <title> Show Build Dependency </title>

      <para>
         Build Gear can produce a graphical overview of the dependencies for a
         specific build. For example:
      </para>

<screen>
$ buildgear show --dependency fs
</screen>

      <para>
         After resolving the dependencies successfully for the "fs" build the
         dependency chart will be available in
         <code>build/output/dependency.fs.svg</code>.
      </para>

   </section>



   <section>
      <title> Update Footprint </title>

      <para>
         To update the footprint for a build simply do eg.:
      </para>

<screen>
$ buildgear build zlib --update-footprint
</screen>

      <para>
         Likewise, to update the footprints for the build and all its
         dependecies simply do eg.:
      </para>

<screen>
$ buildgear build fs --update-footprint --all
</screen>

   </section>



   <section>
      <title> Update Checksum </title>

      <para>
         To update the checksum for a build simply do eg.:
      </para>

<screen>
$ buildgear build zlib --update-checksum
</screen>

      <para>
         Likewise, to update the checksums for the build and all its
         dependecies simply do eg.:
      </para>

<screen>
$ buildgear build fs --update-checksum --all
</screen>

   </section>



   <section>
      <title> Show Footprint </title>

      <para>
         To show the footprint for a build simply do eg.:
      </para>

<screen>
$ buildgear show --footprint zlib
</screen>

   </section>



   <section>
      <title> Show Checksum </title>

      <para>
         To show the checksum for a build simply do eg.:
      </para>

<screen>
$ buildgear show --checksum zlib
</screen>

   </section>



   <section>
      <title> Download Source </title>

      <para>
         To download the source of a build simply do eg.:
      </para>

<screen>
$ buildgear download zlib
</screen>

      <para>
         Likewise, to download the source of a build including the source of
         all its dependencies simply do eg.:
      </para>

<screen>
$ buildgear download --all zlib
</screen>

      <para>
         To download the source of all available builds simply do:
      </para>

<screen>
$ buildgear download --all
</screen>

   </section>

   <section>
      <title> Cleaning </title>

      <para>
         To clean (delete) the internal build package of a build simply do eg.:
      </para>

<screen>
$ buildgear clean connman
</screen>

      <para>
         This will of course force a rebuild the next time you build zlib.
      </para>

      <para>
         Likewise, to clean a build and all of its dependencies simply do eg.:
      </para>

<screen>
$ buildgear clean --all connman
</screen>

      <para>
         To clean all builds simply do:
      </para>

<screen>
$ buildgear clean --all
</screen>

      <para>
         Please be careful, the above command will remove everything in
         <code>build/package</code>. Meaning everything will rebuild from
         scratch in your next build command.
      </para>

   </section>

   <section>
      <title> Tool Configuration </title>

      <para>
         You can use the Build Gear tool configuration command to set eg. the
         number of parallel builds in your current build space:
      </para>

<screen>
$ buildgear config parallel_builds 4
</screen>

      <para>
         Likewise, to set the same configuration globally simply do:
      </para>

<screen>
$ buildgear config --global parallel_builds 4
</screen>

      <para>
         To list the available tool configuration settings simple do:
      </para>

<screen>
$ buildgear config --list
</screen>

    <note>
       Tool configuration settings can be applied to either a specific build
       space (local) or to all build spaces (global). Local settings always
       override global settings. If settings are not set they simply retain
       their default value.
    </note>

   </section>


   <section>
      <title> Layer Configuration </title>

      <para>
         Using build layers it is possible to override build files with build
         files of a higher priority. This feature is quite useful in case some
         existing build files do not suit your specific needs and you want to
         override with your own variants. Layers are defined in the global
         configuration file (<code>config/config</code>) like so:
      </para>

<screen>
# Layer configuration
LAYERS=(layer0 layer1 layer2 default)
</screen>

      <para>
         Layers with higher priority overrides layers with lower prority.  The
         layers are prioritized according to the order in which they are
         listed. Meaning, the first layer in the list (<code>layer0</code>) is
         the highest priority and the layer listed last (<code>default</code>)
         is the lowest priority. The <code>default</code> layer name can be
         omitted in which case it will automatically assume lowest priority.
      </para>

      <note>
         Please notice that the layer name <code>default</code> is a reserved
         keyword for the layer name that a buildfile belongs to by default if
         no layer is defined for the buildfile.
      </note>

      <para>
         Buildfiles are automatically assigned to &lt;layer&gt; when placed in:
      </para>
<screen>
buildfiles/cross/cross-&lt;layer&gt;
buildfiles/native/native-&lt;layer&gt;
</screen>
      <para>
         If &lt;layer&gt; is not defined in the LAYERS list then build files in
         these locations will automatically be assigned to the
         <code>default</code> layer.
      </para>

      <para>
         Alternatively, it is also possible to assign a single buildfile to a
         specific layer by adding the <code>layer</code> variable to the
         buildfile, eg.:
      </para>

<screen>
layer=layer0
</screen>

      <note>
         Please notice that the preferred method for assigning layers is by
         Buildfile path location (eg. cross-&lt;layer&gt;) and not by using the
         <code>layer</code> variable.
      </note>

   </section>


   <section>
      <title> Strip Configuration </title>

      <para>
         By default the output object files of a build are automatically
         stripped (symbols discarded). The stripped files include executables,
         shared libraries (.so), and static archives (.a).
      </para>

      <para>
         It is possible to disable this strip step entirely by simply adding
         the <code>nostrip</code> option to the special options array in the
         buildfile like so:
      </para>

<screen>
options=(nostrip)
</screen>

      <para>
         Alternatively, it is also possible to select which files will not be
         automatically stripped by adding a <code>nostrip</code> array to the
         buildfile matching the files you don't want to be stripped. For
         example:
      </para>

<screen>
nostrip=(/usr/lib/libtest.so /usr/lib/libtest.a)
</screen>

      <para>
         Entries in the nostrip array are treated as regular expressions (as
         used by grep) making it possible to do file pattern matching.
      </para>

      <note>
         Please notice that the nostrip array will have no effect if the nostrip
         options is defined in the special options array.
      </note>

   </section>


   <section>
      <title> Force Non-Parallel Building </title>

      <para>
         When building in parallel mode (parallel_builds > 1) it is possible to
         force a specific build to be built in non-parallel by adding a build
         lock. To do so simple add the following option to the special options
         field in the relevant buildfile like so:
      </para>

<screen>
options=(buildlock)
</screen>

   </section>



</chapter>
